name: Security Scan
on:
  push:
    branches: ['**']

jobs:
  security-scan:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning
    
    # Secrets scanning
    - name: TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --json

    # Check for sensitive files
    - name: Check for sensitive files
      run: |
        SENSITIVE_FILES=$(find . -type f \( \
          -name ".env*" \
          -o -name "*.pem" \
          -o -name "*.key" \
          -o -name "*secret*.yml" \
          -o -name "*secret*.yaml" \
          -o -name "*secret*.json" \
          -o -name "*secret*" \
          -o -name "credentials*" \
        \) ! -path "./.git/*")
        
        if [ -n "$SENSITIVE_FILES" ]; then
          echo "❌ Sensitive files found:"
          echo "$SENSITIVE_FILES"
          exit 1
        else
          echo "✅ No sensitive files detected"
        fi

    # Better secret detection for passwords in dicts
    - name: detect-secrets scan
      uses: reviewdog/action-detect-secrets@master
      with:
        reporter: github-pr-review
    
   # Clone custom rules into workspace
    - name: Get custom rule repos
      run: |
        git clone --depth 1 https://github.com/trailofbits/semgrep-rules.git .semgrep/trailofbits
    
    # SAST + Secrets
    - name: Semgrep Scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/default
          p/nginx
          p/dockerfile
          p/docker-compose
          p/gitleaks
          p/secrets
          p/r2c-security-audit
          p/owasp-top-ten
          p/secure-defaults
          p/security-audit
          p/python
          r/python.lang.security.audit.hardcoded-password-string.hardcoded-password-string
          p/flask
          p/ci
          p/bandit
          p/trailofbits
          .semgrep/custom-rules.yaml
    
    # Dependency scanning
    - name: Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
